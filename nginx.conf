worker_processes  2;

pid /var/run/nginx.pid;

error_log  /var/log/nginx.error_log  info;

events {
    worker_connections   2000;
}

http {
    	lua_package_path "/usr/local/openresty/nginx/lib/?.lua;;";    
    default_type  application/octet-stream;

    client_header_timeout  3m;
    client_body_timeout    3m;
    send_timeout           3m;

    client_header_buffer_size    1k;
    large_client_header_buffers  4 4k;

    gzip on;
    gzip_min_length  1100;
    gzip_buffers     4 8k;
    gzip_types       text/plain;

    output_buffers   1 32k;
    postpone_output  1460;
    
    sendfile         on;
    tcp_nopush       on;
    tcp_nodelay      on;

    keepalive_timeout  75 20;

    server {

        listen        80;
	resolver      8.8.8.8 valid=300s;
        server_name   _;
	
	access_log /usr/local/openresty/nginx/logs/access.log;
	error_log /usr/local/openresty/nginx/logs/error.log;

        location / {
	    set $target '';

	    access_by_lua '
	      ngx.var.target = ngx.unescape_uri(ngx.var.arg_uri)
	    ';
	    
	    if ($arg_lua) {
	       access_by_lua '
	       local http = require "http"
	       local httpc = http.new()

	       httpc:set_timeout(500)
	       uri = ngx.unescape_uri(ngx.var.arg_uri)

	       headers = ngx.req.get_headers()
	       headers["host"] = nil
	       res, err = httpc:request_uri(uri, {
               	method = ngx.req.get_method(),
        	body = httpc:get_client_body_reader(),
		headers = headers,
		ssl_verify = false
		})
		httpc:proxy_response(res)
		ngx.log(ngx.ERR, res.body)
	        httpc:set_keepalive()
	       ';
	    }	 
	    
	    proxy_pass $target;
        }
    }
}